using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using AutoMapper;
using Zamin.Consts;
using Zamin.Models;
using Zamin.Models.Content;
using Zamin.Models.General;
using Zamin.WebModels;

namespace Zamin.Server.App_Start
{
    public static class AutoMapperConfig
    {
        public static void BuildMap()
        {
            Mapper.Initialize(cfg =>
            {
                //Course
                cfg.CreateMap<Course, CourseWebModel>()
                    .ForMember(d => d.CourseCategoryName, o => o.MapFrom(s => s.CourseCategory.CategoryName))
                    .ForMember(d => d.ImageUrl, o => o.MapFrom(s => GlobalConsts.ServerUrl + DirectoriesConsts.CoursesFolder + "/" + s.ImageFileName));
                cfg.CreateMap<CourseWebModel, Course>()
                    .ForMember(d => d.Tags, o => o.Ignore());


                //CourseCategory
                cfg.CreateMap<CourseCategoryWebModel, CourseCategory>();
                cfg.CreateMap<CourseCategory, CourseCategoryWebModel>();

                //Tag
                cfg.CreateMap<Tag, TagWebModel>();
                cfg.CreateMap<TagWebModel, Tag>();

                //Poster
                cfg.CreateMap<Poster, PosterWebModel>()
               .ForMember(d => d.ImageUrl, o => o.MapFrom(s => GlobalConsts.ServerUrl + DirectoriesConsts.PostersFolder + "/" + s.ImageFileName));
                cfg.CreateMap<PosterWebModel, Poster>()
                    .ForMember(d => d.Tags, o => o.Ignore());

                //GalleryImage
                cfg.CreateMap<GalleryImage, GalleryImageWebModel>()
                     .ForMember(d => d.ImageUrl, o => o.MapFrom(s => GlobalConsts.ServerUrl + DirectoriesConsts.GalleryImagesFolder + "/" + s.ImageFileName))
                    .ForMember(d => d.CreateDate, o => o.MapFrom(s => s.CreateDate.HasValue ? s.CreateDate.Value.ToShortDateString() : null));

                cfg.CreateMap<GalleryImageWebModel, GalleryImage>()
                     .ForMember(d => d.Tags, o => o.Ignore())
                     .ForMember(d => d.CreateDate, o => o.Ignore());

                //Article
                cfg.CreateMap<Article, ArticleWebModel>()
                     .ForMember(d => d.FileUrl, o => o.MapFrom(s => GlobalConsts.ServerUrl + DirectoriesConsts.ArticlesFolder + "/" + s.FileUrl));
                cfg.CreateMap<ArticleWebModel, Article>()
                    .ForMember(d => d.Tags, o => o.Ignore());

                //Activity
                cfg.CreateMap<Activity, ActivityWebModel>()
               .ForMember(d => d.FileUrl, o => o.MapFrom(s => GlobalConsts.ServerUrl + DirectoriesConsts.ActivitiesFolder + "/" + s.FileUrl));
                cfg.CreateMap<ActivityWebModel, Activity>()
                    .ForMember(d => d.Tags, o => o.Ignore());


                //LessonPlan
                cfg.CreateMap<LessonPlan, LessonPlanWebModel>();
                cfg.CreateMap<LessonPlanWebModel, LessonPlan>()
                    .ForMember(d => d.Tags, o => o.Ignore());

                //Lesson
                cfg.CreateMap<Lesson, LessonWebModel>();
                cfg.CreateMap<LessonWebModel, Lesson>()
                    .ForMember(d => d.Tags, o => o.Ignore());

                //video
                cfg.CreateMap<Video, VideoWebModel>();
                //.ForMember(d => d.CreateDate, o => o.MapFrom(s => s.CreateDate.HasValue ? s.CreateDate.Value.ToShortDateString() : null));
                cfg.CreateMap<VideoWebModel, Video>()
                    .ForMember(d => d.Tags, o => o.Ignore())
                    .ForMember(d => d.CreateDate, o => o.Ignore());


                //Users
                cfg.CreateMap<WebsiteUser, WebsiteUserWebModel>();
                cfg.CreateMap<WebsiteUserWebModel, WebsiteUser>()
                    .ForMember(d => d.LessonsWatched, o => o.Ignore())
                    .ForMember(d => d.WebsiteUserLessonLike, o => o.Ignore())
                    .ForMember(d => d.LikedVideo, o => o.Ignore())
                    .ForMember(d => d.LikedGalleryImages, o => o.Ignore())
                    .ForMember(d => d.LikedArticles, o => o.Ignore())
                    .ForMember(d => d.LikedActivities, o => o.Ignore())
                    .ForMember(d => d.LikedLessonPlans, o => o.Ignore())
                    .ForMember(d => d.Tags, o => o.Ignore());
            });
        }
    }
}